"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_slug-utils_ts";
exports.ids = ["_ssr_src_lib_slug-utils_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/slug-utils.ts":
/*!*******************************!*\
  !*** ./src/lib/slug-utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanSlug: () => (/* binding */ cleanSlug),\n/* harmony export */   generateSlug: () => (/* binding */ generateSlug),\n/* harmony export */   generateUniqueSlug: () => (/* binding */ generateUniqueSlug),\n/* harmony export */   isValidSlug: () => (/* binding */ isValidSlug)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(ssr)/./src/lib/supabase.ts\");\n/**\n * Utility functions for generating and managing URL slugs\n */ \n/**\n * Generate a URL-friendly slug from a business name\n * @param name - The business name to convert to a slug\n * @returns A URL-friendly slug string\n */ function generateSlug(name) {\n    return name.toLowerCase().trim()// Replace spaces and special characters with hyphens\n    .replace(/[^a-z0-9\\s-]/g, '') // Remove non-alphanumeric characters except spaces and hyphens\n    .replace(/[\\s_-]+/g, '-') // Replace spaces, underscores, and multiple hyphens with single hyphens\n    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n}\n/**\n * Generate a unique slug by checking for conflicts in the database\n * If a slug already exists, appends an increment (e.g., business-name-1, business-name-2)\n * @param businessName - The business name to generate a slug for\n * @param existingSlug - Optional existing slug to update (for avoiding self-conflict)\n * @returns A unique slug string\n */ async function generateUniqueSlug(businessName, existingSlug) {\n    try {\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createClientComponentClient)();\n        const baseSlug = generateSlug(businessName);\n        if (!baseSlug) {\n            throw new Error('Unable to generate slug from business name');\n        }\n        // First, try the base slug\n        if (existingSlug !== baseSlug) {\n            const { data: existing } = await supabase.from('vendor_profiles').select('slug').eq('slug', baseSlug).single();\n            if (!existing) {\n                return baseSlug;\n            }\n        }\n        // If base slug exists, find the next available increment\n        let counter = 1;\n        let uniqueSlug = `${baseSlug}-${counter}`;\n        while(true){\n            // Skip if this is the existing slug (for updates)\n            if (existingSlug === uniqueSlug) {\n                return uniqueSlug;\n            }\n            const { data: existing } = await supabase.from('vendor_profiles').select('slug').eq('slug', uniqueSlug).single();\n            if (!existing) {\n                return uniqueSlug;\n            }\n            counter++;\n            uniqueSlug = `${baseSlug}-${counter}`;\n            // Safety check to prevent infinite loops\n            if (counter > 1000) {\n                throw new Error('Unable to generate unique slug after 1000 attempts');\n            }\n        }\n    } catch (error) {\n        // If database operations fail, return a fallback slug\n        console.warn('Failed to generate unique slug from database, using fallback:', error);\n        const baseSlug = generateSlug(businessName);\n        return baseSlug || 'vendor';\n    }\n}\n/**\n * Validate if a slug is URL-friendly\n * @param slug - The slug to validate\n * @returns True if the slug is valid\n */ function isValidSlug(slug) {\n    const slugRegex = /^[a-z0-9]+(?:-[a-z0-9]+)*$/;\n    return slugRegex.test(slug) && slug.length > 0 && slug.length <= 100;\n}\n/**\n * Clean and normalize a slug\n * @param slug - The slug to clean\n * @returns A cleaned slug string\n */ function cleanSlug(slug) {\n    return slug.toLowerCase().trim().replace(/[^a-z0-9-]/g, '') // Remove non-alphanumeric characters except hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen\n    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvbGliL3NsdWctdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Q0FFQyxHQUV3RDtBQUV6RDs7OztDQUlDLEdBQ00sU0FBU0MsYUFBYUMsSUFBWTtJQUN2QyxPQUFPQSxLQUNKQyxXQUFXLEdBQ1hDLElBQUksRUFDTCxxREFBcUQ7S0FDcERDLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSSwrREFBK0Q7S0FDNUZBLE9BQU8sQ0FBQyxZQUFZLEtBQUssd0VBQXdFO0tBQ2pHQSxPQUFPLENBQUMsWUFBWSxLQUFLLGtDQUFrQztBQUNoRTtBQUVBOzs7Ozs7Q0FNQyxHQUNNLGVBQWVDLG1CQUNwQkMsWUFBb0IsRUFDcEJDLFlBQXFCO0lBRXJCLElBQUk7UUFDRixNQUFNQyxXQUFXVCxzRUFBMkJBO1FBQzVDLE1BQU1VLFdBQVdULGFBQWFNO1FBRTlCLElBQUksQ0FBQ0csVUFBVTtZQUNiLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUVBLDJCQUEyQjtRQUMzQixJQUFJSCxpQkFBaUJFLFVBQVU7WUFDN0IsTUFBTSxFQUFFRSxNQUFNQyxRQUFRLEVBQUUsR0FBRyxNQUFNSixTQUM5QkssSUFBSSxDQUFDLG1CQUNMQyxNQUFNLENBQUMsUUFDUEMsRUFBRSxDQUFDLFFBQVFOLFVBQ1hPLE1BQU07WUFFVCxJQUFJLENBQUNKLFVBQVU7Z0JBQ2IsT0FBT0g7WUFDVDtRQUNGO1FBRUEseURBQXlEO1FBQ3pELElBQUlRLFVBQVU7UUFDZCxJQUFJQyxhQUFhLEdBQUdULFNBQVMsQ0FBQyxFQUFFUSxTQUFTO1FBRXpDLE1BQU8sS0FBTTtZQUNYLGtEQUFrRDtZQUNsRCxJQUFJVixpQkFBaUJXLFlBQVk7Z0JBQy9CLE9BQU9BO1lBQ1Q7WUFFQSxNQUFNLEVBQUVQLE1BQU1DLFFBQVEsRUFBRSxHQUFHLE1BQU1KLFNBQzlCSyxJQUFJLENBQUMsbUJBQ0xDLE1BQU0sQ0FBQyxRQUNQQyxFQUFFLENBQUMsUUFBUUcsWUFDWEYsTUFBTTtZQUVULElBQUksQ0FBQ0osVUFBVTtnQkFDYixPQUFPTTtZQUNUO1lBRUFEO1lBQ0FDLGFBQWEsR0FBR1QsU0FBUyxDQUFDLEVBQUVRLFNBQVM7WUFFckMseUNBQXlDO1lBQ3pDLElBQUlBLFVBQVUsTUFBTTtnQkFDbEIsTUFBTSxJQUFJUCxNQUFNO1lBQ2xCO1FBQ0Y7SUFDRixFQUFFLE9BQU9TLE9BQU87UUFDZCxzREFBc0Q7UUFDdERDLFFBQVFDLElBQUksQ0FBQyxpRUFBaUVGO1FBQzlFLE1BQU1WLFdBQVdULGFBQWFNO1FBQzlCLE9BQU9HLFlBQVk7SUFDckI7QUFDRjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTYSxZQUFZQyxJQUFZO0lBQ3RDLE1BQU1DLFlBQVk7SUFDbEIsT0FBT0EsVUFBVUMsSUFBSSxDQUFDRixTQUFTQSxLQUFLRyxNQUFNLEdBQUcsS0FBS0gsS0FBS0csTUFBTSxJQUFJO0FBQ25FO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVNDLFVBQVVKLElBQVk7SUFDcEMsT0FBT0EsS0FDSnJCLFdBQVcsR0FDWEMsSUFBSSxHQUNKQyxPQUFPLENBQUMsZUFBZSxJQUFJLG9EQUFvRDtLQUMvRUEsT0FBTyxDQUFDLE9BQU8sS0FBSyw4Q0FBOEM7S0FDbEVBLE9BQU8sQ0FBQyxZQUFZLEtBQUssa0NBQWtDO0FBQ2hFIiwic291cmNlcyI6WyIvVXNlcnMvZGF2aWRiYWxpYW4vRGVza3RvcC9tb21lbnRtb2ktdm9pZC9zcmMvbGliL3NsdWctdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyBmb3IgZ2VuZXJhdGluZyBhbmQgbWFuYWdpbmcgVVJMIHNsdWdzXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50Q29tcG9uZW50Q2xpZW50IH0gZnJvbSAnLi9zdXBhYmFzZSc7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBVUkwtZnJpZW5kbHkgc2x1ZyBmcm9tIGEgYnVzaW5lc3MgbmFtZVxuICogQHBhcmFtIG5hbWUgLSBUaGUgYnVzaW5lc3MgbmFtZSB0byBjb252ZXJ0IHRvIGEgc2x1Z1xuICogQHJldHVybnMgQSBVUkwtZnJpZW5kbHkgc2x1ZyBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlU2x1ZyhuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gbmFtZVxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnRyaW0oKVxuICAgIC8vIFJlcGxhY2Ugc3BhY2VzIGFuZCBzcGVjaWFsIGNoYXJhY3RlcnMgd2l0aCBoeXBoZW5zXG4gICAgLnJlcGxhY2UoL1teYS16MC05XFxzLV0vZywgJycpIC8vIFJlbW92ZSBub24tYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgZXhjZXB0IHNwYWNlcyBhbmQgaHlwaGVuc1xuICAgIC5yZXBsYWNlKC9bXFxzXy1dKy9nLCAnLScpIC8vIFJlcGxhY2Ugc3BhY2VzLCB1bmRlcnNjb3JlcywgYW5kIG11bHRpcGxlIGh5cGhlbnMgd2l0aCBzaW5nbGUgaHlwaGVuc1xuICAgIC5yZXBsYWNlKC9eLSt8LSskL2csICcnKTsgLy8gUmVtb3ZlIGxlYWRpbmcvdHJhaWxpbmcgaHlwaGVuc1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgdW5pcXVlIHNsdWcgYnkgY2hlY2tpbmcgZm9yIGNvbmZsaWN0cyBpbiB0aGUgZGF0YWJhc2VcbiAqIElmIGEgc2x1ZyBhbHJlYWR5IGV4aXN0cywgYXBwZW5kcyBhbiBpbmNyZW1lbnQgKGUuZy4sIGJ1c2luZXNzLW5hbWUtMSwgYnVzaW5lc3MtbmFtZS0yKVxuICogQHBhcmFtIGJ1c2luZXNzTmFtZSAtIFRoZSBidXNpbmVzcyBuYW1lIHRvIGdlbmVyYXRlIGEgc2x1ZyBmb3JcbiAqIEBwYXJhbSBleGlzdGluZ1NsdWcgLSBPcHRpb25hbCBleGlzdGluZyBzbHVnIHRvIHVwZGF0ZSAoZm9yIGF2b2lkaW5nIHNlbGYtY29uZmxpY3QpXG4gKiBAcmV0dXJucyBBIHVuaXF1ZSBzbHVnIHN0cmluZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVVbmlxdWVTbHVnKFxuICBidXNpbmVzc05hbWU6IHN0cmluZyxcbiAgZXhpc3RpbmdTbHVnPzogc3RyaW5nXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICB0cnkge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50Q29tcG9uZW50Q2xpZW50KCk7XG4gICAgY29uc3QgYmFzZVNsdWcgPSBnZW5lcmF0ZVNsdWcoYnVzaW5lc3NOYW1lKTtcblxuICAgIGlmICghYmFzZVNsdWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGdlbmVyYXRlIHNsdWcgZnJvbSBidXNpbmVzcyBuYW1lJyk7XG4gICAgfVxuXG4gICAgLy8gRmlyc3QsIHRyeSB0aGUgYmFzZSBzbHVnXG4gICAgaWYgKGV4aXN0aW5nU2x1ZyAhPT0gYmFzZVNsdWcpIHtcbiAgICAgIGNvbnN0IHsgZGF0YTogZXhpc3RpbmcgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCd2ZW5kb3JfcHJvZmlsZXMnKVxuICAgICAgICAuc2VsZWN0KCdzbHVnJylcbiAgICAgICAgLmVxKCdzbHVnJywgYmFzZVNsdWcpXG4gICAgICAgIC5zaW5nbGUoKTtcblxuICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICByZXR1cm4gYmFzZVNsdWc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgYmFzZSBzbHVnIGV4aXN0cywgZmluZCB0aGUgbmV4dCBhdmFpbGFibGUgaW5jcmVtZW50XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGxldCB1bmlxdWVTbHVnID0gYCR7YmFzZVNsdWd9LSR7Y291bnRlcn1gO1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIC8vIFNraXAgaWYgdGhpcyBpcyB0aGUgZXhpc3Rpbmcgc2x1ZyAoZm9yIHVwZGF0ZXMpXG4gICAgICBpZiAoZXhpc3RpbmdTbHVnID09PSB1bmlxdWVTbHVnKSB7XG4gICAgICAgIHJldHVybiB1bmlxdWVTbHVnO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGRhdGE6IGV4aXN0aW5nIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgndmVuZG9yX3Byb2ZpbGVzJylcbiAgICAgICAgLnNlbGVjdCgnc2x1ZycpXG4gICAgICAgIC5lcSgnc2x1ZycsIHVuaXF1ZVNsdWcpXG4gICAgICAgIC5zaW5nbGUoKTtcblxuICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICByZXR1cm4gdW5pcXVlU2x1ZztcbiAgICAgIH1cblxuICAgICAgY291bnRlcisrO1xuICAgICAgdW5pcXVlU2x1ZyA9IGAke2Jhc2VTbHVnfS0ke2NvdW50ZXJ9YDtcblxuICAgICAgLy8gU2FmZXR5IGNoZWNrIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcHNcbiAgICAgIGlmIChjb3VudGVyID4gMTAwMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBnZW5lcmF0ZSB1bmlxdWUgc2x1ZyBhZnRlciAxMDAwIGF0dGVtcHRzJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIElmIGRhdGFiYXNlIG9wZXJhdGlvbnMgZmFpbCwgcmV0dXJuIGEgZmFsbGJhY2sgc2x1Z1xuICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGdlbmVyYXRlIHVuaXF1ZSBzbHVnIGZyb20gZGF0YWJhc2UsIHVzaW5nIGZhbGxiYWNrOicsIGVycm9yKTtcbiAgICBjb25zdCBiYXNlU2x1ZyA9IGdlbmVyYXRlU2x1ZyhidXNpbmVzc05hbWUpO1xuICAgIHJldHVybiBiYXNlU2x1ZyB8fCAndmVuZG9yJztcbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIGlmIGEgc2x1ZyBpcyBVUkwtZnJpZW5kbHlcbiAqIEBwYXJhbSBzbHVnIC0gVGhlIHNsdWcgdG8gdmFsaWRhdGVcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNsdWcgaXMgdmFsaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRTbHVnKHNsdWc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBzbHVnUmVnZXggPSAvXlthLXowLTldKyg/Oi1bYS16MC05XSspKiQvO1xuICByZXR1cm4gc2x1Z1JlZ2V4LnRlc3Qoc2x1ZykgJiYgc2x1Zy5sZW5ndGggPiAwICYmIHNsdWcubGVuZ3RoIDw9IDEwMDtcbn1cblxuLyoqXG4gKiBDbGVhbiBhbmQgbm9ybWFsaXplIGEgc2x1Z1xuICogQHBhcmFtIHNsdWcgLSBUaGUgc2x1ZyB0byBjbGVhblxuICogQHJldHVybnMgQSBjbGVhbmVkIHNsdWcgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGVhblNsdWcoc2x1Zzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHNsdWdcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC50cmltKClcbiAgICAucmVwbGFjZSgvW15hLXowLTktXS9nLCAnJykgLy8gUmVtb3ZlIG5vbi1hbHBoYW51bWVyaWMgY2hhcmFjdGVycyBleGNlcHQgaHlwaGVuc1xuICAgIC5yZXBsYWNlKC8tKy9nLCAnLScpIC8vIFJlcGxhY2UgbXVsdGlwbGUgaHlwaGVucyB3aXRoIHNpbmdsZSBoeXBoZW5cbiAgICAucmVwbGFjZSgvXi0rfC0rJC9nLCAnJyk7IC8vIFJlbW92ZSBsZWFkaW5nL3RyYWlsaW5nIGh5cGhlbnNcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnRDb21wb25lbnRDbGllbnQiLCJnZW5lcmF0ZVNsdWciLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJ0cmltIiwicmVwbGFjZSIsImdlbmVyYXRlVW5pcXVlU2x1ZyIsImJ1c2luZXNzTmFtZSIsImV4aXN0aW5nU2x1ZyIsInN1cGFiYXNlIiwiYmFzZVNsdWciLCJFcnJvciIsImRhdGEiLCJleGlzdGluZyIsImZyb20iLCJzZWxlY3QiLCJlcSIsInNpbmdsZSIsImNvdW50ZXIiLCJ1bmlxdWVTbHVnIiwiZXJyb3IiLCJjb25zb2xlIiwid2FybiIsImlzVmFsaWRTbHVnIiwic2x1ZyIsInNsdWdSZWdleCIsInRlc3QiLCJsZW5ndGgiLCJjbGVhblNsdWciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/slug-utils.ts\n");

/***/ })

};
;