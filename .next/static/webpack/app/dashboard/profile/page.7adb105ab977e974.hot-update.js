"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/profile/page",{

/***/ "(app-pages-browser)/./src/hooks/useVendorProfile.ts":
/*!***************************************!*\
  !*** ./src/hooks/useVendorProfile.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useVendorProfile: () => (/* binding */ useVendorProfile)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/contexts/AuthContext */ \"(app-pages-browser)/./src/contexts/AuthContext.tsx\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\n\n\nfunction useVendorProfile() {\n    const { user } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__.useAuth)();\n    const [profile, setProfile] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [contacts, setContacts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [locations, setLocations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const fetchProfile = async ()=>{\n        if (!user) {\n            setLoading(false);\n            return;\n        }\n        try {\n            // First check if user is a vendor by querying their profile\n            const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.createClientComponentClient)();\n            const { data: userProfile, error: userProfileError } = await supabase.from(\"profiles\").select(\"user_type\").eq(\"id\", user.id).single();\n            if (userProfileError) {\n                console.error(\"Error fetching user profile:\", userProfileError);\n                setError(\"Failed to verify user type\");\n                setLoading(false);\n                return;\n            }\n            // Only proceed if user is a vendor\n            if (userProfile.user_type !== \"vendor\") {\n                console.log(\"User is not a vendor, skipping vendor profile fetch\");\n                setProfile(null);\n                setContacts([]);\n                setLocations([]);\n                setLoading(false);\n                return;\n            }\n            // Now fetch vendor profile with retry logic for timing issues\n            let profileData = null;\n            let vendorProfileError = null;\n            const maxRetries = 3;\n            const retryDelay = 1000;\n            for(let attempt = 1; attempt <= maxRetries; attempt++){\n                const { data, error } = await supabase.from(\"vendor_profiles\").select(\"*\").eq(\"user_id\", user.id).single();\n                profileData = data;\n                vendorProfileError = error;\n                if (profileError) {\n                    var _profileError_message;\n                    console.error(\"Error fetching vendor profile (attempt \".concat(attempt, \"/\").concat(maxRetries, \"):\"), profileError);\n                    // If vendor profile doesn't exist, that's expected for new vendors\n                    if (profileError.code === 'PGRST116') {\n                        console.log(\"Vendor profile doesn't exist yet - this is normal for new vendors\");\n                        setProfile(null);\n                        setContacts([]);\n                        setLocations([]);\n                        setError(null);\n                        setLoading(false);\n                        return;\n                    }\n                    // If this is a 406 error and we have retries left, wait and try again\n                    if (((_profileError_message = profileError.message) === null || _profileError_message === void 0 ? void 0 : _profileError_message.includes('406')) && attempt < maxRetries) {\n                        console.log(\"Received 406 error, retrying in \".concat(retryDelay, \"ms (attempt \").concat(attempt, \"/\").concat(maxRetries, \")\"));\n                        await new Promise((resolve)=>setTimeout(resolve, retryDelay));\n                        continue;\n                    }\n                    break;\n                } else {\n                    break;\n                }\n            }\n            if (profileError) {\n                console.error(\"Final error fetching vendor profile:\", JSON.stringify(profileError, null, 2));\n                setError(\"Failed to load profile data. Please try refreshing the page.\");\n                setLoading(false);\n                return;\n            }\n            setProfile(profileData);\n            // Fetch vendor contacts\n            const { data: contactsData, error: contactsError } = await supabase.from(\"vendor_contacts\").select(\"*\").eq(\"vendor_id\", profileData.id).order(\"is_primary\", {\n                ascending: false\n            });\n            if (contactsError) {\n                console.error(\"Error fetching vendor contacts:\", contactsError);\n            } else {\n                setContacts(contactsData || []);\n            }\n            // Fetch vendor locations\n            const { data: locationsData, error: locationsError } = await supabase.from(\"vendor_locations\").select(\"*\").eq(\"vendor_id\", profileData.id);\n            if (locationsError) {\n                console.error(\"Error fetching vendor locations:\", locationsError);\n            } else {\n                setLocations(locationsData || []);\n            }\n        } catch (err) {\n            console.error(\"Error in fetchProfile:\", err);\n            setError(\"An unexpected error occurred\");\n        } finally{\n            setLoading(false);\n        }\n    };\n    const saveProfile = async (data)=>{\n        if (!user) {\n            return {\n                success: false,\n                error: \"No user found\"\n            };\n        }\n        try {\n            const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_2__.createClientComponentClient)();\n            let vendorProfileId;\n            if (!profile) {\n                // No profile exists, create one\n                console.log(\"No vendor profile found, creating new one...\");\n                // Generate unique slug for the vendor\n                let slug;\n                try {\n                    const { generateUniqueSlug } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_slug-utils_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/slug-utils */ \"(app-pages-browser)/./src/lib/slug-utils.ts\"));\n                    slug = await generateUniqueSlug(data.business_name);\n                } catch (slugError) {\n                    console.warn('Failed to generate slug, creating vendor without slug:', slugError);\n                // Continue without slug - it will use ID for routing\n                }\n                const { data: newProfile, error: createError } = await supabase.from(\"vendor_profiles\").insert({\n                    user_id: user.id,\n                    business_name: data.business_name,\n                    ...slug && {\n                        slug\n                    },\n                    description: data.description,\n                    business_category: data.business_category,\n                    event_types: data.event_types,\n                    logo_url: data.logo_url\n                }).select().single();\n                if (createError) {\n                    console.error(\"Failed to create vendor profile:\", createError);\n                    return {\n                        success: false,\n                        error: \"Failed to create profile\"\n                    };\n                }\n                vendorProfileId = newProfile.id;\n                console.log(\"Vendor profile created with ID:\", vendorProfileId);\n            } else {\n                // Profile exists, update it\n                vendorProfileId = profile.id;\n                console.log(\"Updating existing vendor profile...\");\n                // Check if business name changed and regenerate slug if needed\n                let updateData = {\n                    business_name: data.business_name,\n                    description: data.description,\n                    business_category: data.business_category,\n                    event_types: data.event_types,\n                    logo_url: data.logo_url,\n                    updated_at: new Date().toISOString()\n                };\n                if (profile.business_name !== data.business_name) {\n                    // Business name changed, regenerate slug\n                    try {\n                        const { generateUniqueSlug } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_slug-utils_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/slug-utils */ \"(app-pages-browser)/./src/lib/slug-utils.ts\"));\n                        const newSlug = await generateUniqueSlug(data.business_name, profile.slug || undefined);\n                        updateData.slug = newSlug;\n                        console.log(\"Business name changed, regenerating slug: \".concat(newSlug));\n                    } catch (slugError) {\n                        console.warn('Failed to regenerate slug, keeping existing slug:', slugError);\n                    // Keep existing slug or don't update it\n                    }\n                }\n                const { data: updateResult, error: profileError1 } = await supabase.from(\"vendor_profiles\").update(updateData).eq(\"id\", profile.id).select();\n                if (profileError1) {\n                    return {\n                        success: false,\n                        error: \"Failed to update profile\"\n                    };\n                }\n            }\n            console.log(\"🗑️ Deleting existing contacts and locations...\");\n            // Delete contacts first (only if profile existed before)\n            if (profile) {\n                const { error: deleteContactsError } = await supabase.from(\"vendor_contacts\").delete().eq(\"vendor_id\", profile.id);\n                console.log(\"📞 Contacts delete error:\", deleteContactsError);\n                if (deleteContactsError) {\n                    console.log(\"❌ Failed to delete contacts:\", deleteContactsError);\n                    return {\n                        success: false,\n                        error: \"Failed to delete existing contacts\"\n                    };\n                }\n                console.log(\"✅ Contacts deleted successfully\");\n                // Delete locations\n                const { error: deleteLocationsError } = await supabase.from(\"vendor_locations\").delete().eq(\"vendor_id\", profile.id);\n                console.log(\"📍 Locations delete error:\", deleteLocationsError);\n                if (deleteLocationsError) {\n                    console.log(\"❌ Failed to delete locations:\", deleteLocationsError);\n                    return {\n                        success: false,\n                        error: \"Failed to delete existing locations\"\n                    };\n                }\n                console.log(\"✅ Locations deleted successfully\");\n            }\n            console.log(\"📞 Inserting new contacts...\");\n            // Insert new contacts\n            if (data.contacts.length > 0) {\n                console.log(\"📋 Contacts to insert:\", data.contacts);\n                const { error: contactsError } = await supabase.from(\"vendor_contacts\").insert(data.contacts.map((contact)=>({\n                        vendor_id: vendorProfileId,\n                        contact_type: contact.contact_type,\n                        contact_value: contact.contact_value,\n                        is_primary: contact.is_primary\n                    })));\n                console.log(\"📞 Contacts insert error:\", contactsError);\n                if (contactsError) {\n                    console.log(\"❌ Failed to insert contacts:\", contactsError);\n                    return {\n                        success: false,\n                        error: \"Failed to update contacts\"\n                    };\n                }\n                console.log(\"✅ Contacts inserted successfully\");\n            } else {\n                console.log(\"ℹ️ No contacts to insert\");\n            }\n            console.log(\"📍 Inserting new locations...\");\n            // Insert new locations\n            if (data.locations.length > 0) {\n                console.log(\"🗺️ Locations to insert:\", data.locations);\n                // Validate location values\n                const validLocations = [\n                    \"nicosia\",\n                    \"limassol\",\n                    \"larnaca\",\n                    \"paphos\",\n                    \"platres\",\n                    \"paralimni_ayia_napa\",\n                    \"whole_cyprus\"\n                ];\n                const invalidLocations = data.locations.filter((location)=>!validLocations.includes(location));\n                if (invalidLocations.length > 0) {\n                    console.log(\"❌ Invalid location values:\", invalidLocations);\n                    return {\n                        success: false,\n                        error: \"Invalid location values: \".concat(invalidLocations.join(\", \"))\n                    };\n                }\n                const locationData = data.locations.map((location)=>({\n                        vendor_id: vendorProfileId,\n                        location: location\n                    }));\n                console.log(\"🗺️ Location data to insert:\", locationData);\n                const { data: insertedLocations, error: locationsError } = await supabase.from(\"vendor_locations\").insert(locationData).select();\n                console.log(\"📍 Locations insert error:\", locationsError);\n                console.log(\"📍 Inserted locations:\", insertedLocations);\n                if (locationsError) {\n                    console.log(\"❌ Failed to insert locations:\", locationsError);\n                    return {\n                        success: false,\n                        error: \"Failed to update locations\"\n                    };\n                }\n                console.log(\"✅ Locations inserted successfully\");\n            } else {\n                console.log(\"ℹ️ No locations to insert\");\n            }\n            console.log(\"🔄 Refetching profile data...\");\n            // Refetch data to update the UI\n            await fetchProfile();\n            console.log(\"🎉 Profile save completed successfully!\");\n            return {\n                success: true\n            };\n        } catch (err) {\n            console.log(\"💥 Exception in saveProfile:\", err);\n            return {\n                success: false,\n                error: \"An unexpected error occurred\"\n            };\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useVendorProfile.useEffect\": ()=>{\n            fetchProfile();\n        }\n    }[\"useVendorProfile.useEffect\"], [\n        user\n    ]);\n    return {\n        profile,\n        contacts,\n        locations,\n        loading,\n        error,\n        refetch: fetchProfile,\n        saveProfile\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useVendorProfile.ts\n"));

/***/ })

});